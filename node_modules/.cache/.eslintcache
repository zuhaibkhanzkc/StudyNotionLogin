[{"/Users/zuhaib/Desktop/router-project-starter 2/src/index.js":"1","/Users/zuhaib/Desktop/router-project-starter 2/src/App.js":"2","/Users/zuhaib/Desktop/router-project-starter 2/src/pages/Login.js":"3","/Users/zuhaib/Desktop/router-project-starter 2/src/components/PrivateRoute.js":"4","/Users/zuhaib/Desktop/router-project-starter 2/src/pages/Dashboard.js":"5","/Users/zuhaib/Desktop/router-project-starter 2/src/pages/Home.js":"6","/Users/zuhaib/Desktop/router-project-starter 2/src/pages/Signup.js":"7","/Users/zuhaib/Desktop/router-project-starter 2/src/components/Navbar.js":"8","/Users/zuhaib/Desktop/router-project-starter 2/src/components/Template.js":"9","/Users/zuhaib/Desktop/router-project-starter 2/src/components/LoginForm.js":"10","/Users/zuhaib/Desktop/router-project-starter 2/src/components/SignupForm.js":"11"},{"size":355,"mtime":1679587823000,"results":"12","hashOfConfig":"13"},{"size":1105,"mtime":1679764217000,"results":"14","hashOfConfig":"13"},{"size":435,"mtime":1679591677000,"results":"15","hashOfConfig":"13"},{"size":244,"mtime":1679763769000,"results":"16","hashOfConfig":"13"},{"size":220,"mtime":1679764256000,"results":"17","hashOfConfig":"13"},{"size":202,"mtime":1679763902000,"results":"18","hashOfConfig":"13"},{"size":489,"mtime":1679591680000,"results":"19","hashOfConfig":"13"},{"size":2494,"mtime":1679759085000,"results":"20","hashOfConfig":"13"},{"size":2216,"mtime":1679761721000,"results":"21","hashOfConfig":"13"},{"size":2878,"mtime":1679764323000,"results":"22","hashOfConfig":"13"},{"size":7070,"mtime":1679764404000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mi07w7",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},"/Users/zuhaib/Desktop/router-project-starter 2/src/index.js",[],[],"/Users/zuhaib/Desktop/router-project-starter 2/src/App.js",["59"],[],"import { Route, Routes } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Navbar from \"./components/Navbar\"\r\nimport Home from \"./pages/Home\"\r\nimport Login from \"./pages/Login\"\r\nimport Signup from \"./pages/Signup\"\r\nimport Dashboard from \"./pages/Dashboard\"\r\nimport { useEffect, useState } from 'react'\r\nimport PrivateRoute from \"./components/PrivateRoute\";\r\n\r\n\r\nfunction App() {\r\n\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n \r\n\r\n  return (\r\n    <div className=\"w-screen h-screen bg-richblack-900 flex flex-col\">\r\n      <Navbar isLoggedIn={isLoggedIn} setIsLoggedIn={setIsLoggedIn}/>\r\n\r\n      <Routes>\r\n\r\n        <Route path=\"/\" element= {<Home isLoggedIn={isLoggedIn}/>} />\r\n        <Route path=\"/login\" element = {<Login  setIsLoggedIn={setIsLoggedIn} />} />\r\n        <Route path=\"/signup\" element={<Signup  setIsLoggedIn={setIsLoggedIn} />} />\r\n        <Route path=\"/dashboard\" element = {\r\n          <PrivateRoute isLoggedIn={isLoggedIn}>\r\n              <Dashboard/>\r\n          </PrivateRoute>\r\n       \r\n        } />\r\n\r\n      </Routes>\r\n\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","/Users/zuhaib/Desktop/router-project-starter 2/src/pages/Login.js",[],[],"/Users/zuhaib/Desktop/router-project-starter 2/src/components/PrivateRoute.js",[],[],"/Users/zuhaib/Desktop/router-project-starter 2/src/pages/Dashboard.js",[],[],"/Users/zuhaib/Desktop/router-project-starter 2/src/pages/Home.js",[],[],"/Users/zuhaib/Desktop/router-project-starter 2/src/pages/Signup.js",[],[],"/Users/zuhaib/Desktop/router-project-starter 2/src/components/Navbar.js",[],[],"/Users/zuhaib/Desktop/router-project-starter 2/src/components/Template.js",[],[],"/Users/zuhaib/Desktop/router-project-starter 2/src/components/LoginForm.js",[],[],"/Users/zuhaib/Desktop/router-project-starter 2/src/components/SignupForm.js",["60"],[],"import React, { useState } from 'react'\nimport { AiOutlineEye, AiOutlineEyeInvisible } from \"react-icons/ai\";\nimport {toast} from \"react-hot-toast\"\nimport { useNavigate } from 'react-router-dom';\n\n\nconst SignupForm = ({setIsLoggedIn}) => {\n    const navigate = useNavigate();\n\n    const [formData, setFormData] = useState({\n        firstName:\"\",\n        lastName:\"\",\n        email:\"\",\n        password:\"\",\n        confirmPassword:\"\"\n    })\n\n    const [showPassword, setShowPassword] = useState(false);\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n    const [accountType, setAccountType] = useState(\"student\");\n\n    function changeHandler(event) {\n\n        setFormData( (prevData) =>(\n            {\n                ...prevData,\n                [event.target.name]:event.target.value\n            }\n        ) )\n\n    }\n\n    function submitHandler(event) {\n        event.preventDefault();\n        if(formData.password != formData.confirmPassword) {\n            toast.error(\"Passwords do not match\");\n            return ;\n        }\n\n        setIsLoggedIn(true);\n        toast.success(\"Account Created\");\n        const accountData = {\n            ...formData\n        };\n\n        const finalData = {\n            ...accountData,\n            accountType\n        }\n\n        console.log(\"printing Final account data \");\n        console.log(finalData);\n\n        navigate(\"/dashboard\");\n\n    }\n\n\n  return (\n    <div>\n        {/* student-Instructor tab */}\n        <div\n        className='flex bg-richblack-800 p-1 gap-x-1 my-6 rounded-full max-w-max'>\n\n            <button\n            className={`${accountType === \"student\" \n            ?\n              \"bg-richblack-900 text-richblack-5\"\n            :\"bg-transparent text-richblack-200\"} py-2 px-5 rounded-full transition-all duration-200`}\n            onClick={()=> setAccountType(\"student\")}>\n                Student\n            </button>\n\n            <button\n            className={`${accountType === \"instructor\" \n            ?\n              \"bg-richblack-900 text-richblack-5\"\n            :\"bg-transparent text-richblack-200\"} py-2 px-5 rounded-full transition-all duration-200`}\n            onClick={() => setAccountType(\"instructor\")}>\n                Instructor\n            </button>\n        </div>\n\n        <form onSubmit={submitHandler} >\n        {/* first name and lastName */}\n            <div className='flex gap-x-4 mt-[20px]'>\n                    <label className='w-full'>\n                        <p className='text-[0.875rem] text-richblack-5 mb-1 leading-[1.375rem]'>First Name<sup className='text-pink-200'>*</sup></p>\n                        <input\n                            required\n                            type=\"text\"\n                            name=\"firstName\"\n                            onChange={changeHandler}\n                            placeholder=\"Enter First Name\"\n                            value={formData.firstName}\n                            className='bg-richblack-800 rounded-[0.5rem] text-richblack-5 w-full p-[12px]'\n                        />\n                    </label>\n\n                    <label className='w-full'>\n                        <p className='text-[0.875rem] text-richblack-5 mb-1 leading-[1.375rem]'>Last Name<sup className='text-pink-200'>*</sup></p>\n                        <input\n                            required\n                            type=\"text\"\n                            name=\"lastName\"\n                            onChange={changeHandler}\n                            placeholder=\"Enter Last Name\"\n                            value={formData.lastName}\n                            className='bg-richblack-800 rounded-[0.5rem] text-richblack-5 w-full p-[12px]'\n                        />\n                    </label>\n            </div>\n            {/* email Add */}\n            <div className='mt-[20px]'>\n            <label className='w-full mt-[20px]'>\n                    <p className='text-[0.875rem] text-richblack-5 mb-1 leading-[1.375rem]'>Email Address<sup className='text-pink-200'>*</sup></p>\n                    <input\n                        required\n                        type=\"email\"\n                        name=\"email\"\n                        onChange={changeHandler}\n                        placeholder=\"Enter Email Address \"\n                        value={formData.email}\n                        className='bg-richblack-800 rounded-[0.5rem] text-richblack-5 w-full p-[12px]'\n                    />\n            </label>\n            </div>\n            \n\n            {/* createPassword and Confirm Password */}\n            <div className='w-full flex gap-x-4 mt-[20px]'>\n                <label className='w-full relative'>\n                    <p className='text-[0.875rem] text-richblack-5 mb-1 leading-[1.375rem]'>Create Password<sup className='text-pink-200'>*</sup></p>\n                    <input\n                        required\n                        type= {showPassword ? (\"text\") : (\"password\")}\n                        name=\"password\"\n                        onChange={changeHandler}\n                        placeholder=\"Enter Password\"\n                        value={formData.password}\n                        className='bg-richblack-800 rounded-[0.5rem] text-richblack-5 w-full p-[12px]'\n                    />\n                    <span\n                     className='absolute right-3 top-[38px] cursor-pointer' \n                    onClick={() => setShowPassword((prev) => !prev)}>\n                        {showPassword ? \n\n                        (<AiOutlineEyeInvisible fontSize={24} fill='#AFB2BF'/>) : \n\n                        (<AiOutlineEye fontSize={24} fill='#AFB2BF'/>)}\n                    </span>\n                </label>\n\n                <label className='w-full relative'>\n                    <p className='text-[0.875rem] text-richblack-5 mb-1 leading-[1.375rem]'>Confirm Password<sup className='text-pink-200'>*</sup></p>\n                    <input\n                        required\n                        type= {showConfirmPassword ? (\"text\") : (\"password\")}\n                        name=\"confirmPassword\"\n                        onChange={changeHandler}\n                        placeholder=\"Confirm Password\"\n                        value={formData.confirmPassword}\n                        className='bg-richblack-800 rounded-[0.5rem] text-richblack-5 w-full p-[12px]'\n                    />\n                    <span \n                     className='absolute right-3 top-[38px] cursor-pointer'\n                    onClick={() => setShowConfirmPassword((prev) => !prev)}>\n                        {showConfirmPassword ?\n\n                         (<AiOutlineEyeInvisible fontSize={24} fill='#AFB2BF'/>) : \n\n                         (<AiOutlineEye fontSize={24} fill='#AFB2BF'/>)}\n                    </span>\n                </label>\n            </div>\n        <button className=' w-full bg-yellow-50 rounded-[8px] font-medium text-richblack-900 px-[12px] py-[8px] mt-6'>\n            Create Account\n        </button>\n        </form>\n\n    </div>\n  )\n}\n\nexport default SignupForm\n",{"ruleId":"61","severity":1,"message":"62","line":8,"column":10,"nodeType":"63","messageId":"64","endLine":8,"endColumn":19},{"ruleId":"65","severity":1,"message":"66","line":35,"column":30,"nodeType":"67","messageId":"68","endLine":35,"endColumn":32},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected"]